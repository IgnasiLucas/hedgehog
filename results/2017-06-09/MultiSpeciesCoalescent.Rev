#######################
# Reading in the Data #
#######################

source("ReadInTheData.Rev")
locus_names = ["COIII", "FGA", "GHRmeredith", "lrpprc_169", "npas3", "sim1", "tex2", "ttr", "zfy", "zic3"]

num_loci = locus_names.size()

# read in each data matrix separately
for ( i in 1:num_loci ) {
    data[i] <- readDiscreteCharacterData("data/" + locus_names[i] + ".fasta")
}
# alternatively we could have read in from data/merged.nex too (although that contains the empty sequences ...)

# Get some useful variables from the data. We need these later on.
primate_tree = readTrees("data/primates.tree")[1]
n_species <- primate_tree.ntips()
taxa <- primate_tree.taxa()
n_branches <- 2 * n_species - 1 # number of branches in a rooted tree

# set my move index
mi = 0



######################
# Species-Tree model #
######################

# Specify a prior on the diversification and turnover rate
speciation ~ dnGamma(2,2)
relativeExtinction ~ dnBeta(1,1)

# now transform the diversification and turnover rates into speciation and extinction rates
extinction := speciation * relativeExtinction

# specify a prior on the root age (our informed guess is about 75-80 mya)
root ~ dnNormal(mean=75,sd=2.5,min=0.0, max=Inf)

sampling_fraction <- 23 / 450 # 23 out of the ~ 450 primate species

# create some moves that change the stochastic variables
# all moves are sliding and scaling proposals
moves[++mi] = mvSlide(speciation,delta=1,tune=true,weight=2)
moves[++mi] = mvSlide(relativeExtinction,delta=1,tune=true,weight=2)
moves[++mi] = mvScale(speciation,lambda=1,tune=true,weight=2)
moves[++mi] = mvScale(relativeExtinction,lambda=1,tune=true,weight=2)
moves[++mi] = mvSlide(root,delta=1,tune=true,weight=0.2)


# construct a variable for the tree drawn from a birth death process
psi ~ dnBDP(lambda=speciation, mu=extinction, rootAge=root, rho=sampling_fraction, taxa=taxa )

moves[++mi] = mvNarrow(psi, weight=5.0)
moves[++mi] = mvNNI(psi, weight=1.0)
moves[++mi] = mvFNPR(psi, weight=3.0)
moves[++mi] = mvGPR(psi, weight=3.0)
moves[++mi] = mvSubtreeScale(psi, weight=3.0)
moves[++mi] = mvNodeTimeSlideUniform(psi, weight=15.0)
moves[++mi] = mvTreeNodeAgeSlide(psi, weight=100)



###################
# Gene-Tree model #
###################


# We assume independent effective population size parameters for each branch of the species tree.
for (i in 1:n_species) {
  Ne[i] <- 10.0
}
for (i in (n_species+1):n_branches) {
  Ne[i] ~ dnExponential(0.01)
  moves[++mi] = mvScale(Ne[i],1,true,1.0)
}

# We could also assume a single effective population size for the entire species tree.
#Ne ~ dnGamma(shape=1.0,rate=1.0)
#moves[++mi] = mvScale(Ne,1,true,1.0)

move_species_narrow_exchange = mvSpeciesNarrow( speciesTree=psi, weight=5 )

for (i in 1:num_loci) {

   # We need to read in files providing the link between gene names and species names
   taxon_map = readTaxonData("data/species_maps/primates_" + locus_names[i] + "_species_map.txt")

   # The gene tree from the multispecies coalescent process
   # Note that if Ne had been a vector of effective population sizes, 
   # allowing 1 parameter per branch of the species tree, the same line would work.
   geneTree[i] ~ dnMultiSpeciesCoalescent(speciesTree=psi, Ne=Ne, taxa=taxon_map)

   # moves on the tree
   moves[++mi] = mvNNI(geneTree[i], 5.0)
   moves[++mi] = mvNarrow(geneTree[i], 5.0)
   moves[++mi] = mvFNPR(geneTree[i], 3.0)
   moves[++mi] = mvGPR(geneTree[i], 2.0)
   moves[++mi] = mvSubtreeScale(geneTree[i], 5.0)
   moves[++mi] = mvTreeScale(geneTree[i], 1.0, true, 3.0)
   moves[++mi] = mvNodeTimeSlideUniform(geneTree[i], 20.0)
   move_species_narrow_exchange.addGeneTreeVariable( geneTree[i] )

}

moves[++mi] = move_species_narrow_exchange


###############
# Clock Model #
###############

for ( i in 1:num_loci ) { 
#   log_clock_rate[i] ~ dnUniform(-4,1)
#   clock_rate[i] := 10^log_clock_rate[i]
#   
#   moves[++mi] = mvSlide(log_clock_rate[i], weight=1.0)

   clock_rate[i] ~ dnExponential(1.0)
   
   moves[++mi] = mvScale(clock_rate[i], weight=1.0)
}


######################
# Substitution Model #
######################


for ( i in 1:num_loci ) {

    #### specify the HKY substitution model applied uniformly to all sites ###
    kappa[i] ~ dnLognormal(0,1)
    moves[++mi] = mvScale(kappa[i],weight=1)


    pi_prior[i] <- v(1,1,1,1) 
    pi[i] ~ dnDirichlet(pi_prior[i])
    moves[++mi] = mvSimplexElementScale(pi[i],weight=2)


    #### create a deterministic variable for the rate matrix ####
    Q[i] := fnHKY(kappa[i],pi[i]) 

}




#############################
# Among Site Rate Variation #
#############################


for ( i in 1:num_loci ) {

    alpha_prior[i] <- 0.05
    alpha[i] ~ dnExponential( alpha_prior[i] )
    gamma_rates[i] := fnDiscretizeGamma( alpha[i], alpha[i], 4, false )

    # add moves for the stationary frequencies, exchangeability rates and the shape parameter
    moves[++mi] = mvScale(alpha[i],weight=2)

}

###################
# PhyloCTMC Model #
###################



for ( i in 1:num_loci ) { 
    # the sequence evolution model
    seq[i] ~ dnPhyloCTMC(tree=geneTree[i], Q=Q[i], branchRates=clock_rate[i], siteRates=gamma_rates[i], type="DNA")

    # attach the data
    seq[i].clamp(data[i])
}




#############
# THE Model #
#############

# We get a handle on our model.
# We can use any node of our model as a handle, here we choose to use the topology.
mymodel = model(psi)

# Monitors to check the progression of the program
monitors[1] = mnScreen(printgen=100, root)
monitors[2] = mnModel(filename="output/primates_root_calibration.log",printgen=10, separator = TAB)
monitors[3] = mnFile(filename="output/primates_root_calibration.trees",printgen=10, separator = TAB, psi)
for ( i in 1:num_loci ) { 
    # We add a monitor for each gene tree
    monitors[i+3] = mnFile(filename="output/primates_root_calibration_" + locus_names[i] + ".trees",printgen=10, separator = TAB, geneTree[i])
}

# Here we use a plain MCMC. You could also set nruns=2 for a replicated analysis
# or use mcmcmc with heated chains.
mymcmc = mcmc(mymodel, monitors, moves)

# This should be sufficient to obtain enough MCMC samples
mymcmc.burnin(generations=3000,tuningInterval=100)
mymcmc.run(generations=10000)


# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
treetrace = readTreeTrace("output/primates_root_calibration.trees", treetype="clock")
# and get the summary of the tree trace
#treetrace.summarize()

mapTree(treetrace,"output/primates_root_calibration.tree")

# you may want to quit RevBayes now
q()
